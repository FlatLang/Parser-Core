package flat/parser

import flat/ast
import flat/datastruct/list/Stack
import flat/compiler/models/Token
import flat/io/File
import flat/log/Logger

data class {
  static Logger log = Logger(ParseContext.class)

  visible Stack<Node> parentStack = Stack()
  visible Stack<ParserBase> parserStack = Stack()
  visible var ParserBase currentParser => parserStack.peek()
  visible var ParserBase currentScopeParser => parserStack.toArray().lastWhere({ _.class.interfaces.any({ _.name == "ScopeableParser" }) })
  visible var Stack<Node> statementParentStack = Stack()
  visible var Node currentNode => statementParentStack.peek()
  visible var Token[] tokens = Token[]
  visible var AnnotationNode[] annotations = AnnotationNode[]

  visible File file
  visible FileNode fileNode => parentStack.toArray().firstWhere({ _.class.isOfType(FileNode.class) })

  public addMetadata(Node node) {
    if (node.class.isOfType(AnnotationNode.class)) {
      annotations.add((AnnotationNode)node)
      log.debugFunc({"Added annotation #{node.class.name}"})
    }
  }
}