package flat/parser

import flat/datastruct/list/Stack
import flat/ast/Node
import flat/ast/AnnotationNode
import flat/ast/FileNode
import flat/ast/ScopeNode
import flat/compiler/models/Token
import flat/io/File
import flat/log/Logger
import flat/stream/Stream

class {
  static Logger log = Logger(Parser.class)

  public parse(
    ParserBase rootParser,
    ParseContext parseContext,
    Stream tokenStream
  ) -> Stream {
    let stream = Stream(true)

    let engine = ParseEngine(rootParser, parseContext, stream)

    let dataEvent = tokenStream.on<Token>("data", (token) => {
      Parser.log.traceFunc({"Received data from Token Stream: #{token}"})

      engine.consume(token)
    })$

    let errorEvent = tokenStream.on<String>("error", (error) => {
      Parser.log.traceFunc({"Received error from Token Stream: #{error}"})
      stream.emit("error", error)$
    })$

    tokenStream.on("close", {
      await dataEvent
      await errorEvent
      Parser.log.traceFunc({"Token Stream closed"})
      engine.end()
      stream.emit("close")$
    })$

    return stream
  }
}