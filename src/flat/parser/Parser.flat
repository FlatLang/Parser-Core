package flat/parser

import flat/datastruct/list/Stack
import flat/ast/Node
import flat/ast/AnnotationNode
import flat/ast/FileNode
import flat/ast/ScopeNode
import flat/compiler/models/Token
import flat/io/File
import flat/log/Logger
import flat/eventstream/EventStream

class {
  static Logger log = Logger(Parser.class)

  public parse(
    ParserBase rootParser,
    ParseContext parseContext,
    EventStream tokenStream
  ) =>
    EventStream(true).on("start", (data, stream) => {
      let engine = ParseEngine(rootParser, parseContext, stream)

      tokenStream.on<Token>("data", (token) => {
        Parser.log.traceFunc({"Received data from Token EventStream: #{token}"})

        engine.consume(token)
      })

      tokenStream.on<String>("error", (error) => {
        Parser.log.traceFunc({"Received error from Token EventStream: #{error}"})
        stream.emit("error", error)
      })

      tokenStream.on("close", {
        Parser.log.traceFunc({"Token EventStream closed"})
        engine.end()
        stream.emit("close")
      })
    })
}