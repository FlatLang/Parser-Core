package flat/parser/matchers

import flat/parser
import flat/datastruct/HashMap
import flat/compiler/models/Token
import flat/ast
import flat/log

data class extends TokenMatch<NodeTokenPattern> {
  static Logger log = Logger(NodeTokenMatch.class)

  visible NodeTokenMatchChild[] childMatches = NodeTokenMatchChild[]

  visible ParserBase parser => childMatches.last.parser

  public generateNode() => childMatches.first.generateNode()
  public generateNodes() => childMatches.flatMap({ _.generateNodes() })

  override public getValues(String label) => String[] {
    return childMatches.flatMap({ _.getValues(label) })
  }

  override public getMatches<Type extends TokenMatch>(String label, Bool addSelf = true) -> Type[] {
    let array = Type[]

    if (addSelf && this.label == label) {
      array.add(this)
    }

    return array:addAll(childMatches.flatMap({ _.getMatches(label, addSelf) }))
  }
}