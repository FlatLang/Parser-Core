package flat/parser/matchers

import flat/parser
import flat/datastruct/HashMap
import flat/compiler/models/Token
import flat/ast

data class extends TokenMatch<NodeTokenPattern> {
  visible NodeTokenMatchChild[] childMatches = NodeTokenMatchChild[]

  visible ParserBase parser => childMatches.last.parser

  override public getValues(String label) => String[] {
    return childMatches.flatMap({ _.getValues(label) })
  }

  override public getMatches<Type extends TokenMatch>(String label, Bool addSelf = true) -> Type[] {
    let array = Type[]

    if (addSelf && this.label == label) {
      array.add(this)
    }

    return array:addAll(childMatches.flatMap({ _.getMatches(label, addSelf) }))
  }

  public generateNode() =>
    childMatches.first.generateNode()

  public generateNodes() -> Node[] {
    let nodes = Node[]

    childMatches.forEach((match) => {
      nodes.add(match.generateNode())

      if (let childNodeMatches = match.parser.getChildNodeTokenMatches()) {
        if (childNodeMatches.isNotEmpty) {
          childNodeMatches.forEach((childMatch) => {
            nodes.addAll(childMatch.generateNodes())
          })
        }
      }
    })

    return nodes
  }
}