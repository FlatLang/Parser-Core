package flat/parser/matchers

import flat/datastruct/HashMap
import flat/compiler/models/Token
import flat/ast/AnnotationNode
import flat/log/Logger

data class extends TokenPattern {
  static Logger log = Logger(PreconditionTokenPattern.class)

  public construct(
    visible Array<Class<AnnotationNode>> annotations = null,
    this String: label = null,
    this Bool optional = false,
    this Bool repeat = false,
    this Bool greedy = true,
    this Bool includeTokens = true
  ) {}

  public getMatcher() => PreconditionTokenMatcher(this)

  var String _pattern

  override public toPatternString() => _pattern {
    if (!_pattern) {
      _pattern = ""

      if (label) {
        _pattern += "#{label}:"
      }

      _pattern += "pre("

      if (annotations) {
        _pattern += "Annotations[#{annotations.map(a => a.name).join(", ")}]"
      }

      _pattern += ")"
      _pattern += getModifiersString()
    }
  }
}