package flat/parser/matchers

import flat/parser
import flat/datastruct/HashMap
import flat/compiler/models/Token
import flat/ast/Node

data class extends TokenMatch<NodeGroupTokenPattern> {
  visible TokenMatch[] childMatches = TokenMatch[]

  visible ParserBase parser {
    get {
      var ParserBase lastParser

      if (childMatches.last.class == NodeTokenMatch.class) {
        let obj = (Object)childMatches.last
        let matcher = (NodeTokenMatch)obj
        lastParser = matcher.parser
      } else {
        let obj = (Object)childMatches.last
        let matcher = (NodeGroupTokenMatch)obj
        lastParser = matcher.parser
      }

      return lastParser
    }
  }

  public traverseNodes(func(Node, ParseContext, TokenPattern)) => childMatches.forEach({ _.traverseNodes(func) })

  override public getValues(String label) => String[] {
    return childMatches.flatMap({ _.getValues(label) })
  }

  override public getMatches<Type extends TokenMatch>(String label, Bool addSelf = true) -> Type[] {
    let array = Type[]

    if (addSelf && this.label == label) {
      array.add(this)
    }

    return array:addAll(childMatches.flatMap({ _.getMatches(label, addSelf) }))
  }

  tokenMatchToNodeTokenMatches(TokenMatch childMatch) -> NodeTokenMatch[] {
    if (childMatch.class.isOfType(NodeGroupTokenMatch.class)) {
      let groupMatch = (NodeGroupTokenMatch)childMatch
      return groupMatch.getChildNodeMatches()
    } else if (childMatch.class.isOfType(NodeTokenMatch.class)) {
      let nodeMatch = (NodeTokenMatch)childMatch
      return Array<NodeTokenMatch>():add(nodeMatch)
    } else {
      throw Exception("Invalid child match type: #{childMatch.class.name}")
    }

    return null
  }

  public getChildNodeMatches() -> NodeTokenMatch[] {
    return childMatches.flatMap((childMatch) => {
      return tokenMatchToNodeTokenMatches(childMatch)
    })
  }
}