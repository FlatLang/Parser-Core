package flat/parser/matchers

import flat/ast
import flat/datastruct/HashMap
import flat/compiler/models/Token

data class extends TokenMatch<XorTokenPattern> {
  visible TokenMatch tokenMatch

  override public inflateNode<NodeType extends Node>(NodeType node) => tokenMatch.inflateNode(node)

  override public generateNodes() -> Node[] {
    let nodes = tokenMatch.generateNodes()
    if (Object.referenceEquals(pattern.getNodeType(), Node.class)) {
      return nodes
    } else {
      return Array():add(generateNode()):addAll(nodes)
    }
  }

  override public getValues(String label) -> String[] {
    return tokenMatch.getValues(label)
  }

  override public getMatches<Type extends TokenMatch>(String label, Bool addSelf = true) -> Type[] {
    let array = Type[]

    if (addSelf && this.label == label) {
      array.add(this)
    }

    tokenMatch.getMatches(label)
      .filter({ _.label == label })
      :forEach({ array.add(_) })

    return array
  }
}