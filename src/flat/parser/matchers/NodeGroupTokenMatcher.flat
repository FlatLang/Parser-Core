package flat/parser/matchers

import flat/parser
import flat/datastruct
import flat/datastruct/list
import flat/compiler/models/Token
import flat/log/Logger

import static flat/colorizer/Colorizer

data class extends TokenMatcher {
  static Logger log = Logger(NodeGroupTokenMatcher.class)

  NodeGroupTokenPattern pattern

  var Stack<NodeTokenMatch> currentMatches = Stack()
  var NodeTokenMatch[] childMatches = NodeTokenMatch[]
  var NodeGroupTokenMatch groupMatch
  var ParserBase[] currentParsers
  var NodeTokenMatcher currentMatcher
  var Bool addedCurrentMatch = false
  var Bool attemptingBacktrackMatch = false

  override public match(Token token, ParseContext context = null) -> NodeGroupTokenMatch {
    if (!currentParsers) {
      resetCurrentParsers(context)
    }
    if (!currentMatcher) {
      currentMatcher = NodeTokenPattern(currentParsers, statementEndToken: pattern.statementEndToken, baseParser: true).getMatcher()
    }

    return super.match(token, context)
  }

  override public checkMatch(Token token, ParseContext context) -> NodeGroupTokenMatch => null {
    if (disqualified) return null

    tokens.add(token)

    log.traceFunc({"|
      Matching token '#{green(token.value)}' #{token.type} #{magenta(token.location?.lineNumber.toString())}:#{magenta(token.location?.column.toString())}:
        tokens: [#{tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
        statementEndToken: #{pattern.statementEndToken?.value}
      |"})

    if (let match = Logger.indent({ currentMatcher.match(token, context) })) {
      if (match.childMatches.isEmpty) {
        log.traceFunc({"Partial match for current matcher"})
        return null
      }
      log.traceFunc({"|
        Successful match with current matcher:
          parser: #{green(match.parser.class.name)}
          matcher: #{magenta(match.parser.pattern.toPatternString())}
          pattern: #{magenta(pattern.toPatternString())}
        |"})

      let wasDisqualified = currentMatcher.disqualified
      if (wasDisqualified) {
        log.traceFunc({"Current matcher is disqualified. Returning match and switching to new current matcher"})
        resetCurrentParsers(context)
        currentMatcher = NodeTokenPattern(currentParsers, statementEndToken: pattern.statementEndToken, baseParser: true).getMatcher()
        complete = true
      } else {
        log.traceFunc({"Current matcher is partial. Returning match and continuing"})
      }

      valid = true
      complete = complete || currentMatcher.complete

      if (addedCurrentMatch) {
        currentMatches.push(match)
        log.traceFunc({"Replacing last match"})
        childMatches.replaceLast(match)
      } else {
        currentMatches = Stack():push(match)
        log.traceFunc({"Adding last match"})
        childMatches.add(match)
      }

      if (wasDisqualified) {
        addedCurrentMatch = false
      } else {
        addedCurrentMatch = true
      }

      groupMatch = addNodeMatchToGroupMatch(match, childMatches.copy())

      if (groupMatch.tokens.count == tokens.count) {
        log.traceFunc({"|
          Returning group match:
            tokens: [#{tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
            childMatches:
              #{childMatches.map(m => "[" + m.tokens.map(t => "'" + green(t.value) + "'").join(", ", 50) + "]").join("\n    ")}
          |"})

        return groupMatch
      }

      if (let backtrack = attemptBacktrackMatch(context)) {
        return backtrack
      }

      if (!partial) {
        log.traceFunc({"|
          Backtrack was not partial. Returning group match:
            tokens: [#{tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
            childMatches:
              #{childMatches.map(m => "[" + m.tokens.map(t => "'" + green(t.value) + "'").join(", ", 50) + "]").join("\n    ")}
          |"})

        return groupMatch
      }
    } else if (currentMatcher.partial) {
      log.traceFunc({"Partial match. Continuing"})
    } else if (groupMatch && !attemptingBacktrackMatch) {
      return attemptBacktrackMatch(context)
    } else {
      log.traceFunc({"Did not match. Disqualified"})
      disqualified = true
    }
  }

  addNodeMatchToGroupMatch(NodeTokenMatch match, TokenMatch[] childMatches) -> NodeGroupTokenMatch {
    if (groupMatch) {
      log.traceFunc({"|
        Adding to current groupMatch
          current groupMatch.tokens: [#{groupMatch.tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
          match.tokens: [#{match.tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
        |"})
      return groupMatch.copy(
        tokens: pattern.includeTokens ? childMatches.flatMap({ _.tokens }) : Token[],
        childMatches: childMatches
      )
    } else {
      log.traceFunc({"|
        Creating new groupMatch from tokens:
          match.tokens: [#{match.tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
        |"})
      return NodeGroupTokenMatch(
        tokens: pattern.includeTokens ? match.tokens.copy() : Token[],
        label: pattern.label,
        childMatches: childMatches
      )
    }
  }

  attemptBacktrackMatch(ParseContext context) -> NodeGroupTokenMatch => null {
    let tokensToMatch = tokens.skip(groupMatch.tokens.count)
    resetCurrentParsers(context)
    currentMatcher = NodeTokenPattern(currentParsers, statementEndToken: pattern.statementEndToken, baseParser: true).getMatcher()
    addedCurrentMatch = false
    log.traceFunc({"|
      Attempting backtrack match:
        old tokens: [#{tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
        new tokens: [#{groupMatch.tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
        tokensToMatch: [#{tokensToMatch.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
        childMatches:
          #{childMatches.map(m => "[" + m.tokens.map(t => "'" + green(t.value) + "'").join(", ", 50) + "]").join("\n    ")}
        disqualified: #{disqualified}
        complete: #{complete}
        valid: #{valid}
      |"})
    tokens = groupMatch.tokens.copy()
    if (tokensToMatch.isNotEmpty) {
      attemptingBacktrackMatch = true
      let values = tokensToMatch.map({
        return this.checkMatch(_, context)
      })
      attemptingBacktrackMatch = false

      if (let backtrackMatch = values.lastWhere({ _ != null })) {
        if (values.last == null && partial) {
          log.traceFunc({"Successful backtrack match. Matcher is partial. Returning null"})
          return null
        }

        log.traceFunc({"|
          Got successful backtrack match:
            matched tokens: [#{backtrackMatch.tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
            tokens: [#{tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
            tokensToMatch: [#{tokensToMatch.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
            childMatches:
              #{childMatches.map(m => "[" + m.tokens.map(t => "'" + green(t.value) + "'").join(", ", 50) + "]").join("\n    ")}
            disqualified: #{disqualified}
            complete: #{complete}
            valid: #{valid}
          |"})

        return backtrackMatch
      } else if (currentMatcher.partial) {
        log.traceFunc({"Partial backtrack match. Continuing"})
        return null
      } else {
        log.traceFunc({"|
          Failed backtrack match:
            tokens: [#{tokens.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
            tokensToMatch: [#{tokensToMatch.map(t => "'" + green(t.value) + "'").join(", ", 50)}]
            childMatches:
              #{childMatches.map(m => "[" + m.tokens.map(t => "'" + green(t.value) + "'").join(", ", 50) + "]").join("\n    ")}
            disqualified: #{disqualified}
            complete: #{complete}
            valid: #{valid}
            currentMatches.count: #{currentMatches.count}
          |"})

        if (currentMatches.count > 1) {
          let wasDisqualified = disqualified
          disqualified = false
          childMatches.replaceLast((currentMatches:pop().peek()))
          groupMatch = groupMatch.copy(
            tokens: pattern.includeTokens ? childMatches.flatMap({ _.tokens }) : Token[],
            childMatches: childMatches.copy()
          )

          return attemptBacktrackMatch(context)
        }

        return null
      }
    } else {
      log.traceFunc({"No more tokens to match. Disqualified"})
      disqualified = true
    }
  }

  resetCurrentParsers(ParseContext context) {
    currentParsers = pattern.parsers
    currentParsers.forEach({ _.context = context })
  }

  override public reset() {
    if (!dirty) return

    log.traceFunc({"Resetting matcher"})
    super.reset()

    pattern.parsers.forEach({ _.reset() })
    currentMatches = Stack()
    childMatches = NodeTokenMatch[]
    groupMatch = null
    currentParsers = pattern.parsers
    currentMatcher = null
    addedCurrentMatch = false
    attemptingBacktrackMatch = false
  }
}