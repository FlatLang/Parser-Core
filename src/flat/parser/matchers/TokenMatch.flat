package flat/parser/matchers

import flat/ast
import flat/datastruct/HashMap
import flat/compiler/models/Token

abstract data class<TokenPatternType extends TokenPattern> {
  visible Token[] tokens
  visible String label
  visible data_ignore var TokenPatternType pattern

  lazy Function constructor => pattern.getNodeType().functions.firstWhere({ _.name == "construct" })

  public inflateNode<NodeType extends Node>(NodeType node) => node

  public generateNode() -> Node => null {
    if (let func = constructor) {
      if (let value = func.callStatic(pattern.getNodeType())) {
        let node = (Node)value
        return inflateNode(node)
      }
    }
  }

  public getValue(String label) -> String {
    let values = this.getValues(label)

    return values.first
  }

  public getValues(String label) -> String[] {
    if (this.label == label) {
      return tokens.map({ _.value })
    }

    return String[]
  }

  public getMatch<Type extends TokenMatch>(String label) -> Type {
    let matches = this.getMatches(label)

    return matches.first
  }

  public getMatches<Type extends TokenMatch>(String label, Bool addSelf = true) -> Type[] {
    let array = Type[]

    if (addSelf && this.label == label) {
      array.add(this)
    }

    return array
  }
}