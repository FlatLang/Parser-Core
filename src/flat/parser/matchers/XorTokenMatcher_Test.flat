package flat/parser/matchers

import flat/datastruct/HashMap
import flat/parser
import flat/annotations
import flat/ast
import flat/parser/flat
import flat/compiler/models/Token
import flat/io/File

testable class {
    test `returns tokens on simple successful match on first pattern`() {
        let pattern = XorTokenPattern([
            SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "package"),
            SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "import")
        ])

        let matcher = pattern.getMatcher()
        let result = matcher.match(Token(value: "package", type: Token.Type.IDENTIFIER))

        expect(result?.tokens).toBe([Token(value: "package", type: Token.Type.IDENTIFIER)])
    }

    test `returns tokens on simple successful match on second pattern`() {
        let pattern = XorTokenPattern([
            SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "package"),
            SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "import")
        ])

        let matcher = pattern.getMatcher()
        let result = matcher.match(Token(value: "import", type: Token.Type.IDENTIFIER))

        expect(result?.tokens).toBe([Token(value: "import", type: Token.Type.IDENTIFIER)])
    }

    test `returns null on unsuccessful match`() {
        let pattern = XorTokenPattern([
            SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "package"),
            SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "import")
        ])

        let matcher = pattern.getMatcher()
        let result = matcher.match(Token(value: "bob", type: Token.Type.IDENTIFIER))

        expect(result).toBe(null)
    }

    test `can match on group patterns`() {
        let pattern = XorTokenPattern([
            GroupTokenPattern([
                SingleTokenPattern(type: Token.Type.SYMBOL),
                SingleTokenPattern(type: Token.Type.IDENTIFIER)
            ]),
            GroupTokenPattern([
                GroupTokenPattern([
                    SingleTokenPattern(type: Token.Type.IDENTIFIER),
                    GroupTokenPattern([
                        SingleTokenPattern(type: Token.Type.SYMBOL, value: "["),
                        SingleTokenPattern(type: Token.Type.SYMBOL, value: "]")
                    ], repeat: true, greedy: false, optional: true)
                ]),
                SingleTokenPattern(type: Token.Type.IDENTIFIER)
            ])
        ])

        let matcher = pattern.getMatcher()
        let result = matcher.matchAll([
            Token(value: "String", type: Token.Type.IDENTIFIER),
            Token(value: "[", type: Token.Type.SYMBOL),
            Token(value: "]", type: Token.Type.SYMBOL),
            Token(value: "test", type: Token.Type.IDENTIFIER)
        ], ParseContext()).last

        expect(result?.tokens).toBe([
            Token(value: "String", type: Token.Type.IDENTIFIER),
            Token(value: "[", type: Token.Type.SYMBOL),
            Token(value: "]", type: Token.Type.SYMBOL),
            Token(value: "test", type: Token.Type.IDENTIFIER)
        ])
    }

    test `can match on complex group patterns`() {
        let pattern = XorTokenPattern([
            GroupTokenPattern([
                SingleTokenPattern(type: Token.Type.SYMBOL),
                SingleTokenPattern(type: Token.Type.IDENTIFIER)
            ]),
            GroupTokenPattern([
                GroupTokenPattern([
                    SingleTokenPattern(type: Token.Type.IDENTIFIER),
                    GroupTokenPattern([
                        SingleTokenPattern(type: Token.Type.SYMBOL, value: "["),
                        SingleTokenPattern(type: Token.Type.SYMBOL, value: "]")
                    ], repeat: true, greedy: false, optional: true)
                ], greedy: false),
                SingleTokenPattern(type: Token.Type.IDENTIFIER)
            ])
        ])

        let matcher = pattern.getMatcher()
        let result = matcher.matchAll([
            Token(value: "String", type: Token.Type.IDENTIFIER),
            Token(value: "[", type: Token.Type.SYMBOL),
            Token(value: "]", type: Token.Type.SYMBOL),
            Token(value: "[", type: Token.Type.SYMBOL),
            Token(value: "]", type: Token.Type.SYMBOL),
            Token(value: "test", type: Token.Type.IDENTIFIER)
        ], ParseContext()).last

        expect(result?.tokens).toBe([
            Token(value: "String", type: Token.Type.IDENTIFIER),
            Token(value: "[", type: Token.Type.SYMBOL),
            Token(value: "]", type: Token.Type.SYMBOL),
            Token(value: "[", type: Token.Type.SYMBOL),
            Token(value: "]", type: Token.Type.SYMBOL),
            Token(value: "test", type: Token.Type.IDENTIFIER)
        ])
    }

    test `returns partial match if the sub-match is partial`() {
        let pattern = XorTokenPattern([
            GroupTokenPattern([
                XorTokenPattern([
                    GroupTokenPattern([
                        CaptureTokenPattern(

                            start: Token(value: "("),
                            end: Token(value: ")")
                        ),
                        SingleTokenPattern(type: Token.Type.SYMBOL, value: "=>")
                    ]),
                    GroupTokenPattern([
                        SingleTokenPattern(type: Token.Type.IDENTIFIER),
                        SingleTokenPattern(type: Token.Type.SYMBOL, value: "=>")
                    ])
                ]),
                GroupTokenPattern([
                    SingleTokenPattern(type: Token.Type.SYMBOL, value: "{"),
                    NodeGroupTokenPattern(
                        LocalScopeParser().valueParsers,
                        optional: true
                    ),
                    SingleTokenPattern(type: Token.Type.SYMBOL, value: "}")
                ], optional: true)
            ]),
            GroupTokenPattern([
                SingleTokenPattern(type: Token.Type.SYMBOL, value: "{"),
                NodeGroupTokenPattern(
                    LocalScopeParser().valueParsers,
                    optional: true
                ),
                SingleTokenPattern(type: Token.Type.SYMBOL, value: "}")
            ])
        ])

        let matcher = pattern.getMatcher()
        let result = matcher.matchAll([
            Token(value: "(", type: Token.Type.SYMBOL),
            Token(value: "String", type: Token.Type.IDENTIFIER),
            Token(value: "x", type: Token.Type.IDENTIFIER),
            Token(value: ")", type: Token.Type.SYMBOL),
            Token(value: "=>", type: Token.Type.SYMBOL)
        ], ParseContext()).last

        expect(result?.tokens).toBe([
            Token(value: "(", type: Token.Type.SYMBOL),
            Token(value: "String", type: Token.Type.IDENTIFIER),
            Token(value: "x", type: Token.Type.IDENTIFIER),
            Token(value: ")", type: Token.Type.SYMBOL),
            Token(value: "=>", type: Token.Type.SYMBOL)
        ])
        expect(matcher.partial).toBe(true)
    }
}